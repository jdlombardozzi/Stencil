/* Mixins */

/* H5BP */
// image replacement
@mixin image-replacement {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;

  &:before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
  }
}

// hide from both screenreaders and browsers: h5bp.com/u
@mixin hidden {
  display: none !important;
  visibility: hidden;
}

// hide only visually, but have it available for screenreaders: h5bp.com/v
@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  // extends visuallyhidden to allow the element to be focusable
  // when navigated to via the keyboard: h5bp.com/p
  &.focusable:active,
  &.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

// hide visually and from screenreaders, but maintain layout
@mixin invisible {
  visibility: hidden;
}


/* Bootstrap 3 */
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &:active,
  &.active {
    color: $color;
    background-color: darken($background, 8%);
    border-color: darken($border, 12%);
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: $background;
      border-color: $border;
    }
  }
}

@mixin center-block {
  display: block;
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

@mixin grid-wrapper($gutter-width: $grid-gutter-width) {
  margin: {
    right: auto;
    left: auto;
  }
  padding: {
    left: $grid-gutter-width / 2;
    right: $grid-gutter-width / 2;
  }
  @include clearfix;
}

@mixin grid-row($gutter-width: $grid-gutter-width) {
  margin: {
    left: $grid-gutter-width / -2;
    right: $grid-gutter-width / -2;
  }
  @include clearfix;
}

@mixin grid-column-base($gutter-width: $grid-gutter-width) {
  min-height: 1px;
  padding: {
    left: $gutter-width / 2;
    right: $gutter-width / 2
  }
  position: relative;
}

@mixin grid-column($gutter-width, $column...) {
  @include grid-column-base($gutter-width);
  $columns: nth($column, 1);
  $total-columns: $grid-columns;

  @if length($column) == 3 {
    $total-columns: nth($column, 3);
  }

  width: percentage($columns / $total-columns);
}

@mixin responsive-visibility {
  display: block !important;

  tr & {
    display: table-row !important;
  }

  th &,
  td & {
    display: table-cell !important;
  }
}

@mixin responsive-invisibility {
  &,
  tr &,
  th &,
  td & {
    display: none !important;
  }
}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

@mixin tab-focus($color: $gray) {
  outline: thin dotted $color;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-hide {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

/* GD */
@mixin opacity($opacity) {
  opacity: $opacity;

  // modernizr detection
  .no-opacity & {
    filter: alpha(opacity=$opacity*100);
  }
}

@mixin rem-fallback($property, $value, $base: $font-size-main) {
  #{$property}: #{$value * $base}px;
  #{$property}: #{$value}rem;
}
